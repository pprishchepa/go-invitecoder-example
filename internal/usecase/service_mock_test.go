// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/pprishchepa/go-invitecoder-example/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockStatsStorage is a mock of StatsStorage interface.
type MockStatsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStatsStorageMockRecorder
}

// MockStatsStorageMockRecorder is the mock recorder for MockStatsStorage.
type MockStatsStorageMockRecorder struct {
	mock *MockStatsStorage
}

// NewMockStatsStorage creates a new mock instance.
func NewMockStatsStorage(ctrl *gomock.Controller) *MockStatsStorage {
	mock := &MockStatsStorage{ctrl: ctrl}
	mock.recorder = &MockStatsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsStorage) EXPECT() *MockStatsStorageMockRecorder {
	return m.recorder
}

// IncByCode mocks base method.
func (m *MockStatsStorage) IncByCode(ctx context.Context, code string, maxVal int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncByCode", ctx, code, maxVal)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncByCode indicates an expected call of IncByCode.
func (mr *MockStatsStorageMockRecorder) IncByCode(ctx, code, maxVal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncByCode", reflect.TypeOf((*MockStatsStorage)(nil).IncByCode), ctx, code, maxVal)
}

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// SaveUser mocks base method.
func (m *MockUserStorage) SaveUser(ctx context.Context, user entity.InvitedUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserStorageMockRecorder) SaveUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserStorage)(nil).SaveUser), ctx, user)
}
